@page "/"
@using Syncfusion.Blazor.Gantt;

<button class="btn-primary" @onclick="Sorting">Sort Name Column</button>
<button class="btn-primary" @onclick="CustomColumnSorting">Sort CustomColumn</button>
<button class="btn-primary" @onclick="ClearSorting">Clear Sorting</button>
<br />
<br />
<SfGantt @ref="Gantt" DataSource="@TaskCollection" Height="480px" Width="900px" AllowSorting="true">
    <GanttTaskFields Id="TaskId" Name="TaskName"
                     StartDate="StartDate" EndDate="EndDate"
                     Duration="Duration" Progress="Progress" Child="SubTasks">
    </GanttTaskFields>
    <GanttColumns>
        <GanttColumn Field="TaskId" Width="100"></GanttColumn>
        <GanttColumn Field="CustomColumn"></GanttColumn>
        <GanttColumn Field="TaskName" Width="250"></GanttColumn>
        <GanttColumn Field="StartDate"></GanttColumn>
        <GanttColumn Field="Duration"></GanttColumn>
        <GanttColumn Field="Progress"></GanttColumn>
    </GanttColumns>
    <GanttSortSettings>
        <GanttSortDescriptors>
            <GanttSortDescriptor Field="TaskId"
                                 Direction="Syncfusion.Blazor.Grids.SortDirection.Descending"></GanttSortDescriptor>
            <GanttSortDescriptor Field="TaskName"
                                 Direction="Syncfusion.Blazor.Grids.SortDirection.Ascending"></GanttSortDescriptor>
        </GanttSortDescriptors>
    </GanttSortSettings>
    <GanttEvents OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" TValue="TaskData"></GanttEvents>
</SfGantt>

@code{

    public SfGantt<TaskData> Gantt;

    public List<TaskData> TaskCollection { get; set; }

    protected override void OnInitialized()
    {
        this.TaskCollection = GetTaskCollection();
    }

    public void Sorting()
    {
        this.Gantt.SortByColumnAsync("TaskName", Syncfusion.Blazor.Grids.SortDirection.Descending, false);
    }

    public void CustomColumnSorting()
    {
        this.Gantt.SortByColumnAsync("CustomColumn", Syncfusion.Blazor.Grids.SortDirection.Descending, false);
    }

    public void ClearSorting()
    {
        this.Gantt.ClearSortingAsync();
    }

    public void OnActionBegin(GanttActionEventArgs<TaskData> args)
    {
        Console.WriteLine("OnActionBegin: " + args.RequestType + ", " + args.Direction + ", " + args.ColumnName);
    }
    public void OnActionComplete(GanttActionEventArgs<TaskData> args)
    {
        Console.WriteLine("OnActionComplete: " + args.RequestType + ", " + args.Direction + ", " + args.ColumnName);
    }

    public class TaskData
    {
        public int TaskId { get; set; }
        public string TaskName { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public string Duration { get; set; }
        public int Progress { get; set; }
        public List<TaskData> SubTasks { get; set; }
        public int CustomColumn { get; set; }
    }

    public static List<TaskData> GetTaskCollection()
    {
        List<TaskData> Tasks = new List<TaskData>() {
            new TaskData() {
            TaskId = 1,
            TaskName = "Project initiation",
            StartDate = new DateTime(2022, 04, 02),
            EndDate = new DateTime(2022, 04, 21),
            CustomColumn = 2,
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 2,
                    TaskName = "Identify Site location",
                    StartDate = new DateTime(2022, 04, 02),
                    Duration = "0",
                    Progress = 30,
                    CustomColumn = 3
                },
                new TaskData() {
                    TaskId = 3,
                    TaskName = "Perform soil test",
                    StartDate = new DateTime(2022, 04, 02),
                    Duration = "4",
                    Progress = 40,
                    CustomColumn = 4
                },
                new TaskData() {
                    TaskId = 4,
                    TaskName = "Soil test approval",
                    StartDate = new DateTime(2022, 04, 02),
                    Duration = "0",
                    Progress = 30,
                    CustomColumn = 1
                },
            })
        },
        new TaskData() {
            TaskId = 5,
            TaskName = "Project estimation",
            StartDate = new DateTime(2022, 04, 02),
            EndDate = new DateTime(2022, 04, 21),
            CustomColumn = 7,
            SubTasks = (new List <TaskData> () {
                new TaskData() {
                    TaskId = 6,
                    TaskName = "Develop floor plan for estimation",
                    StartDate = new DateTime(2022, 04, 04),
                    Duration = "3",
                    Progress = 30,
                    CustomColumn = 5
                },
                new TaskData() {
                    TaskId = 7,
                    TaskName = "List materials",
                    StartDate = new DateTime(2022, 04, 04),
                    Duration = "3",
                    Progress = 40,
                    CustomColumn = 8
                },
                new TaskData() {
                    TaskId = 8,
                    TaskName = "Estimation approval",
                    StartDate = new DateTime(2022, 04, 04),
                    Duration = "0",
                    Progress = 30,
                    CustomColumn = 6
                }
            })
        }};
        return Tasks;
    }
}